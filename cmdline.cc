/*
  File autogenerated by gengetopt version 2.23
  generated with the following command:
  gengetopt -c cc --show-required -C --default-optional -l

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "cmdline.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: mutilate -s server[:port] [options]";

const char *gengetopt_args_info_versiontext = "";

const char *gengetopt_args_info_description = "\"High-performance\" memcached benchmarking tool";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                    Print help and exit",
  "      --version                 Print version and exit",
  "  -v, --verbose                 Verbosity. Repeat for more verbose.",
  "      --quiet                   Disable log messages.",
  "\nBasic options:",
  "  -s, --server=STRING           Memcached server hostname[:port].  Repeat to\n                                  specify multiple servers.",
  "      --binary                  Use binary memcached protocol instead of ASCII.",
  "  -q, --qps=INT                 Target aggregate QPS. 0 = peak QPS.\n                                  (default=`0')",
  "  -t, --time=INT                Maximum time to run (seconds).  (default=`5')",
  "  -K, --keysize=STRING          Length of memcached keys (distribution).\n                                  (default=`30')",
  "  -V, --valuesize=STRING        Length of memcached values (distribution).\n                                  (default=`200')",
  "  -r, --records=INT             Number of memcached records to use.  If\n                                  multiple memcached servers are given, this\n                                  number is divided by the number of servers.\n                                  (default=`10000')",
  "  -u, --update=FLOAT            Ratio of set:get commands.  (default=`0.0')",
  "\nAdvanced options:",
  "  -U, --username=STRING         Username to use for SASL authentication.",
  "  -P, --password=STRING         Password to use for SASL authentication.",
  "  -T, --threads=INT             Number of threads to spawn.  (default=`1')",
  "      --affinity                Set CPU affinity for threads, round-robin",
  "  -c, --connections=INT         Connections to establish per server.\n                                  (default=`1')",
  "  -d, --depth=INT               Maximum depth to pipeline requests.\n                                  (default=`1')",
  "  -R, --roundrobin              Assign threads to servers in round-robin\n                                  fashion.  By default, each thread connects to\n                                  every server.",
  "  -i, --iadist=STRING           Inter-arrival distribution (distribution).\n                                  Note: The distribution will automatically be\n                                  adjusted to match the QPS given by --qps.\n                                  (default=`exponential')",
  "  -S, --skip                    Skip transmissions if previous requests are\n                                  late.  This harms the long-term QPS average,\n                                  but reduces spikes in QPS after long latency\n                                  requests.",
  "      --moderate                Enforce a minimum delay of ~1/lambda between\n                                  requests.",
  "      --noload                  Skip database loading.",
  "      --loadonly                Load database and then exit.",
  "  -B, --blocking                Use blocking epoll().  May increase latency.",
  "      --no_nodelay              Don't use TCP_NODELAY.",
  "  -w, --warmup=INT              Warmup time before starting measurement.",
  "  -W, --wait=INT                Time to wait after startup to start\n                                  measurement.",
  "      --save=STRING             Record latency samples to given file.",
  "      --search=N:X              Search for the QPS where N-order statistic <\n                                  Xus.  (i.e. --search 95:1000 means find the\n                                  QPS where 95% of requests are faster than\n                                  1000us).",
  "      --scan=min:max:step       Scan latency across QPS rates from min to max.",
  "\nAgent-mode options:",
  "  -A, --agentmode               Run client in agent mode.",
  "  -a, --agent=host              Enlist remote agent.",
  "  -p, --agent_port=STRING       Agent port.  (default=`5556')",
  "  -l, --lambda_mul=INT          Lambda multiplier.  Increases share of QPS for\n                                  this client.  (default=`1')",
  "  -C, --measure_connections=INT Master client connections per server, overrides\n                                  --connections.",
  "  -Q, --measure_qps=INT         Explicitly set master client QPS, spread across\n                                  threads and connections.",
  "  -D, --measure_depth=INT       Set master client connection depth.",
  "\nThe --measure_* options aid in taking latency measurements of the\nmemcached server without incurring significant client-side queuing\ndelay.  --measure_connections allows the master to override the\n--connections option.  --measure_depth allows the master to operate as\nan \"open-loop\" client while other agents continue as a regular\nclosed-loop clients.  --measure_qps lets you modulate the QPS the\nmaster queries at independent of other clients.  This theoretically\nnormalizes the baseline queuing delay you expect to see across a wide\nrange of --qps values.\n\nSome options take a 'distribution' as an argument.\nDistributions are specified by <distribution>[:<param1>[,...]].\nParameters are not required.  The following distributions are supported:\n\n   [fixed:]<value>              Always generates <value>.\n   uniform:<max>                Uniform distribution between 0 and <max>.\n   normal:<mean>,<sd>           Normal distribution.\n   exponential:<lambda>         Exponential distribution.\n   pareto:<loc>,<scale>,<shape> Generalized Pareto distribution.\n   gev:<loc>,<scale>,<shape>    Generalized Extreme Value distribution.\n\n   To recreate the Facebook \"ETC\" request stream from [1], the\n   following hard-coded distributions are also provided:\n\n   fb_value   = a hard-coded discrete and GPareto PDF of value sizes\n   fb_key     = \"gev:30.7984,8.20449,0.078688\", key-size distribution\n   fb_ia      = \"pareto:0.0,16.0292,0.154971\", inter-arrival time dist.\n\n[1] Berk Atikoglu et al., Workload Analysis of a Large-Scale Key-Value Store,\n    SIGMETRICS 2012\n",
    0
};

typedef enum {ARG_NO
  , ARG_STRING
  , ARG_INT
  , ARG_FLOAT
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);
struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->verbose_given = 0 ;
  args_info->quiet_given = 0 ;
  args_info->server_given = 0 ;
  args_info->binary_given = 0 ;
  args_info->qps_given = 0 ;
  args_info->time_given = 0 ;
  args_info->keysize_given = 0 ;
  args_info->valuesize_given = 0 ;
  args_info->records_given = 0 ;
  args_info->update_given = 0 ;
  args_info->username_given = 0 ;
  args_info->password_given = 0 ;
  args_info->threads_given = 0 ;
  args_info->affinity_given = 0 ;
  args_info->connections_given = 0 ;
  args_info->depth_given = 0 ;
  args_info->roundrobin_given = 0 ;
  args_info->iadist_given = 0 ;
  args_info->skip_given = 0 ;
  args_info->moderate_given = 0 ;
  args_info->noload_given = 0 ;
  args_info->loadonly_given = 0 ;
  args_info->blocking_given = 0 ;
  args_info->no_nodelay_given = 0 ;
  args_info->warmup_given = 0 ;
  args_info->wait_given = 0 ;
  args_info->save_given = 0 ;
  args_info->search_given = 0 ;
  args_info->scan_given = 0 ;
  args_info->agentmode_given = 0 ;
  args_info->agent_given = 0 ;
  args_info->agent_port_given = 0 ;
  args_info->lambda_mul_given = 0 ;
  args_info->measure_connections_given = 0 ;
  args_info->measure_qps_given = 0 ;
  args_info->measure_depth_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->server_arg = NULL;
  args_info->server_orig = NULL;
  args_info->qps_arg = 0;
  args_info->qps_orig = NULL;
  args_info->time_arg = 5;
  args_info->time_orig = NULL;
  args_info->keysize_arg = gengetopt_strdup ("30");
  args_info->keysize_orig = NULL;
  args_info->valuesize_arg = gengetopt_strdup ("200");
  args_info->valuesize_orig = NULL;
  args_info->records_arg = 10000;
  args_info->records_orig = NULL;
  args_info->update_arg = 0.0;
  args_info->update_orig = NULL;
  args_info->username_arg = NULL;
  args_info->username_orig = NULL;
  args_info->password_arg = NULL;
  args_info->password_orig = NULL;
  args_info->threads_arg = 1;
  args_info->threads_orig = NULL;
  args_info->connections_arg = 1;
  args_info->connections_orig = NULL;
  args_info->depth_arg = 1;
  args_info->depth_orig = NULL;
  args_info->iadist_arg = gengetopt_strdup ("exponential");
  args_info->iadist_orig = NULL;
  args_info->warmup_orig = NULL;
  args_info->wait_orig = NULL;
  args_info->save_arg = NULL;
  args_info->save_orig = NULL;
  args_info->search_arg = NULL;
  args_info->search_orig = NULL;
  args_info->scan_arg = NULL;
  args_info->scan_orig = NULL;
  args_info->agent_arg = NULL;
  args_info->agent_orig = NULL;
  args_info->agent_port_arg = gengetopt_strdup ("5556");
  args_info->agent_port_orig = NULL;
  args_info->lambda_mul_arg = 1;
  args_info->lambda_mul_orig = NULL;
  args_info->measure_connections_orig = NULL;
  args_info->measure_qps_orig = NULL;
  args_info->measure_depth_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{


  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->verbose_help = gengetopt_args_info_help[2] ;
  args_info->verbose_min = 0;
  args_info->verbose_max = 0;
  args_info->quiet_help = gengetopt_args_info_help[3] ;
  args_info->server_help = gengetopt_args_info_help[5] ;
  args_info->server_min = 0;
  args_info->server_max = 0;
  args_info->binary_help = gengetopt_args_info_help[6] ;
  args_info->qps_help = gengetopt_args_info_help[7] ;
  args_info->time_help = gengetopt_args_info_help[8] ;
  args_info->keysize_help = gengetopt_args_info_help[9] ;
  args_info->valuesize_help = gengetopt_args_info_help[10] ;
  args_info->records_help = gengetopt_args_info_help[11] ;
  args_info->update_help = gengetopt_args_info_help[12] ;
  args_info->username_help = gengetopt_args_info_help[14] ;
  args_info->password_help = gengetopt_args_info_help[15] ;
  args_info->threads_help = gengetopt_args_info_help[16] ;
  args_info->affinity_help = gengetopt_args_info_help[17] ;
  args_info->connections_help = gengetopt_args_info_help[18] ;
  args_info->depth_help = gengetopt_args_info_help[19] ;
  args_info->roundrobin_help = gengetopt_args_info_help[20] ;
  args_info->iadist_help = gengetopt_args_info_help[21] ;
  args_info->skip_help = gengetopt_args_info_help[22] ;
  args_info->moderate_help = gengetopt_args_info_help[23] ;
  args_info->noload_help = gengetopt_args_info_help[24] ;
  args_info->loadonly_help = gengetopt_args_info_help[25] ;
  args_info->blocking_help = gengetopt_args_info_help[26] ;
  args_info->no_nodelay_help = gengetopt_args_info_help[27] ;
  args_info->warmup_help = gengetopt_args_info_help[28] ;
  args_info->wait_help = gengetopt_args_info_help[29] ;
  args_info->save_help = gengetopt_args_info_help[30] ;
  args_info->search_help = gengetopt_args_info_help[31] ;
  args_info->scan_help = gengetopt_args_info_help[32] ;
  args_info->agentmode_help = gengetopt_args_info_help[34] ;
  args_info->agent_help = gengetopt_args_info_help[35] ;
  args_info->agent_min = 0;
  args_info->agent_max = 0;
  args_info->agent_port_help = gengetopt_args_info_help[36] ;
  args_info->lambda_mul_help = gengetopt_args_info_help[37] ;
  args_info->measure_connections_help = gengetopt_args_info_help[38] ;
  args_info->measure_qps_help = gengetopt_args_info_help[39] ;
  args_info->measure_depth_help = gengetopt_args_info_help[40] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);

  if (strlen(gengetopt_args_info_versiontext) > 0)
    printf("\n%s\n", gengetopt_args_info_versiontext);
}

static void print_help_common(void)
{
	size_t len_purpose = strlen(gengetopt_args_info_purpose);
	size_t len_usage = strlen(gengetopt_args_info_usage);

	if (len_usage > 0) {
		printf("%s\n", gengetopt_args_info_usage);
	}
	if (len_purpose > 0) {
		printf("%s\n", gengetopt_args_info_purpose);
	}

	if (len_usage || len_purpose) {
		printf("\n");
	}

	if (strlen(gengetopt_args_info_description) > 0) {
		printf("%s\n\n", gengetopt_args_info_description);
	}
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    float float_arg;
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}


static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{

  free_multiple_string_field (args_info->server_given, &(args_info->server_arg), &(args_info->server_orig));
  free_string_field (&(args_info->qps_orig));
  free_string_field (&(args_info->time_orig));
  free_string_field (&(args_info->keysize_arg));
  free_string_field (&(args_info->keysize_orig));
  free_string_field (&(args_info->valuesize_arg));
  free_string_field (&(args_info->valuesize_orig));
  free_string_field (&(args_info->records_orig));
  free_string_field (&(args_info->update_orig));
  free_string_field (&(args_info->username_arg));
  free_string_field (&(args_info->username_orig));
  free_string_field (&(args_info->password_arg));
  free_string_field (&(args_info->password_orig));
  free_string_field (&(args_info->threads_orig));
  free_string_field (&(args_info->connections_orig));
  free_string_field (&(args_info->depth_orig));
  free_string_field (&(args_info->iadist_arg));
  free_string_field (&(args_info->iadist_orig));
  free_string_field (&(args_info->warmup_orig));
  free_string_field (&(args_info->wait_orig));
  free_string_field (&(args_info->save_arg));
  free_string_field (&(args_info->save_orig));
  free_string_field (&(args_info->search_arg));
  free_string_field (&(args_info->search_orig));
  free_string_field (&(args_info->scan_arg));
  free_string_field (&(args_info->scan_orig));
  free_multiple_string_field (args_info->agent_given, &(args_info->agent_arg), &(args_info->agent_orig));
  free_string_field (&(args_info->agent_port_arg));
  free_string_field (&(args_info->agent_port_orig));
  free_string_field (&(args_info->lambda_mul_orig));
  free_string_field (&(args_info->measure_connections_orig));
  free_string_field (&(args_info->measure_qps_orig));
  free_string_field (&(args_info->measure_depth_orig));
  
  

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  write_multiple_into_file(outfile, args_info->verbose_given, "verbose", 0, 0);
  if (args_info->quiet_given)
    write_into_file(outfile, "quiet", 0, 0 );
  write_multiple_into_file(outfile, args_info->server_given, "server", args_info->server_orig, 0);
  if (args_info->binary_given)
    write_into_file(outfile, "binary", 0, 0 );
  if (args_info->qps_given)
    write_into_file(outfile, "qps", args_info->qps_orig, 0);
  if (args_info->time_given)
    write_into_file(outfile, "time", args_info->time_orig, 0);
  if (args_info->keysize_given)
    write_into_file(outfile, "keysize", args_info->keysize_orig, 0);
  if (args_info->valuesize_given)
    write_into_file(outfile, "valuesize", args_info->valuesize_orig, 0);
  if (args_info->records_given)
    write_into_file(outfile, "records", args_info->records_orig, 0);
  if (args_info->update_given)
    write_into_file(outfile, "update", args_info->update_orig, 0);
  if (args_info->username_given)
    write_into_file(outfile, "username", args_info->username_orig, 0);
  if (args_info->password_given)
    write_into_file(outfile, "password", args_info->password_orig, 0);
  if (args_info->threads_given)
    write_into_file(outfile, "threads", args_info->threads_orig, 0);
  if (args_info->affinity_given)
    write_into_file(outfile, "affinity", 0, 0 );
  if (args_info->connections_given)
    write_into_file(outfile, "connections", args_info->connections_orig, 0);
  if (args_info->depth_given)
    write_into_file(outfile, "depth", args_info->depth_orig, 0);
  if (args_info->roundrobin_given)
    write_into_file(outfile, "roundrobin", 0, 0 );
  if (args_info->iadist_given)
    write_into_file(outfile, "iadist", args_info->iadist_orig, 0);
  if (args_info->skip_given)
    write_into_file(outfile, "skip", 0, 0 );
  if (args_info->moderate_given)
    write_into_file(outfile, "moderate", 0, 0 );
  if (args_info->noload_given)
    write_into_file(outfile, "noload", 0, 0 );
  if (args_info->loadonly_given)
    write_into_file(outfile, "loadonly", 0, 0 );
  if (args_info->blocking_given)
    write_into_file(outfile, "blocking", 0, 0 );
  if (args_info->no_nodelay_given)
    write_into_file(outfile, "no_nodelay", 0, 0 );
  if (args_info->warmup_given)
    write_into_file(outfile, "warmup", args_info->warmup_orig, 0);
  if (args_info->wait_given)
    write_into_file(outfile, "wait", args_info->wait_orig, 0);
  if (args_info->save_given)
    write_into_file(outfile, "save", args_info->save_orig, 0);
  if (args_info->search_given)
    write_into_file(outfile, "search", args_info->search_orig, 0);
  if (args_info->scan_given)
    write_into_file(outfile, "scan", args_info->scan_orig, 0);
  if (args_info->agentmode_given)
    write_into_file(outfile, "agentmode", 0, 0 );
  write_multiple_into_file(outfile, args_info->agent_given, "agent", args_info->agent_orig, 0);
  if (args_info->agent_port_given)
    write_into_file(outfile, "agent_port", args_info->agent_port_orig, 0);
  if (args_info->lambda_mul_given)
    write_into_file(outfile, "lambda_mul", args_info->lambda_mul_orig, 0);
  if (args_info->measure_connections_given)
    write_into_file(outfile, "measure_connections", args_info->measure_connections_orig, 0);
  if (args_info->measure_qps_given)
    write_into_file(outfile, "measure_qps", args_info->measure_qps_orig, 0);
  if (args_info->measure_depth_given)
    write_into_file(outfile, "measure_depth", args_info->measure_depth_orig, 0);
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error_occurred = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error_occurred = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error_occurred = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error_occurred = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error_occurred = 1;
            }
        }
    }
    
  return error_occurred;
}
int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->verbose_given, args_info->verbose_min, args_info->verbose_max, "'--verbose' ('-v')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->server_given, args_info->server_min, args_info->server_max, "'--server' ('-s')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->agent_given, args_info->agent_min, args_info->agent_max, "'--agent' ('-a')"))
     error_occurred = 1;
  
  
  /* checks for dependences among options */

  return error_occurred;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_FLOAT:
    if (val) *((float *)field) = (float)strtod (val, &stop_char);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_FLOAT:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               cmdline_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               cmdline_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_FLOAT:
      *((float **)field) = (float *)realloc (*((float **)field), (field_given + prev_given) * sizeof (float)); break;
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_FLOAT:
          (*((float **)field))[i + field_given] = tmp->arg.float_arg; break;
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_FLOAT:
        if (! *((float **)field)) {
          *((float **)field) = (float *)malloc (sizeof (float));
          (*((float **)field))[0] = default_value->float_arg;
        }
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  struct generic_list * server_list = NULL;
  struct generic_list * agent_list = NULL;
  int error_occurred = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  /* TODO: Why is this here? It is not used anywhere. */
  override = params->override;
  FIX_UNUSED(override);

  initialize = params->initialize;
  check_required = params->check_required;

  /* TODO: Why is this here? It is not used anywhere. */
  check_ambiguity = params->check_ambiguity;
  FIX_UNUSED(check_ambiguity);

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 0 },
        { "verbose",	0, NULL, 'v' },
        { "quiet",	0, NULL, 0 },
        { "server",	1, NULL, 's' },
        { "binary",	0, NULL, 0 },
        { "qps",	1, NULL, 'q' },
        { "time",	1, NULL, 't' },
        { "keysize",	1, NULL, 'K' },
        { "valuesize",	1, NULL, 'V' },
        { "records",	1, NULL, 'r' },
        { "update",	1, NULL, 'u' },
        { "username",	1, NULL, 'U' },
        { "password",	1, NULL, 'P' },
        { "threads",	1, NULL, 'T' },
        { "affinity",	0, NULL, 0 },
        { "connections",	1, NULL, 'c' },
        { "depth",	1, NULL, 'd' },
        { "roundrobin",	0, NULL, 'R' },
        { "iadist",	1, NULL, 'i' },
        { "skip",	0, NULL, 'S' },
        { "moderate",	0, NULL, 0 },
        { "noload",	0, NULL, 0 },
        { "loadonly",	0, NULL, 0 },
        { "blocking",	0, NULL, 'B' },
        { "no_nodelay",	0, NULL, 0 },
        { "warmup",	1, NULL, 'w' },
        { "wait",	1, NULL, 'W' },
        { "save",	1, NULL, 0 },
        { "search",	1, NULL, 0 },
        { "scan",	1, NULL, 0 },
        { "agentmode",	0, NULL, 'A' },
        { "agent",	1, NULL, 'a' },
        { "agent_port",	1, NULL, 'p' },
        { "lambda_mul",	1, NULL, 'l' },
        { "measure_connections",	1, NULL, 'C' },
        { "measure_qps",	1, NULL, 'Q' },
        { "measure_depth",	1, NULL, 'D' },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hvs:q:t:K:V:r:u:U:P:T:c:d:Ri:SBw:W:Aa:p:l:C:Q:D:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          cmdline_parser_print_help ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'v':	/* Verbosity. Repeat for more verbose..  */
        
          local_args_info.verbose_given++;
        
          break;
        case 's':	/* Memcached server hostname[:port].  Repeat to specify multiple servers..  */
        
          if (update_multiple_arg_temp(&server_list, 
              &(local_args_info.server_given), optarg, 0, 0, ARG_STRING,
              "server", 's',
              additional_error))
            goto failure;
        
          break;
        case 'q':	/* Target aggregate QPS. 0 = peak QPS..  */
        
        
          if (update_arg( (void *)&(args_info->qps_arg), 
               &(args_info->qps_orig), &(args_info->qps_given),
              &(local_args_info.qps_given), optarg, 0, "0", ARG_INT,
              check_ambiguity, override, 0, 0,
              "qps", 'q',
              additional_error))
            goto failure;
        
          break;
        case 't':	/* Maximum time to run (seconds)..  */
        
        
          if (update_arg( (void *)&(args_info->time_arg), 
               &(args_info->time_orig), &(args_info->time_given),
              &(local_args_info.time_given), optarg, 0, "5", ARG_INT,
              check_ambiguity, override, 0, 0,
              "time", 't',
              additional_error))
            goto failure;
        
          break;
        case 'K':	/* Length of memcached keys (distribution)..  */
        
        
          if (update_arg( (void *)&(args_info->keysize_arg), 
               &(args_info->keysize_orig), &(args_info->keysize_given),
              &(local_args_info.keysize_given), optarg, 0, "30", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "keysize", 'K',
              additional_error))
            goto failure;
        
          break;
        case 'V':	/* Length of memcached values (distribution)..  */
        
        
          if (update_arg( (void *)&(args_info->valuesize_arg), 
               &(args_info->valuesize_orig), &(args_info->valuesize_given),
              &(local_args_info.valuesize_given), optarg, 0, "200", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "valuesize", 'V',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* Number of memcached records to use.  If multiple memcached servers are given, this number is divided by the number of servers..  */
        
        
          if (update_arg( (void *)&(args_info->records_arg), 
               &(args_info->records_orig), &(args_info->records_given),
              &(local_args_info.records_given), optarg, 0, "10000", ARG_INT,
              check_ambiguity, override, 0, 0,
              "records", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'u':	/* Ratio of set:get commands..  */
        
        
          if (update_arg( (void *)&(args_info->update_arg), 
               &(args_info->update_orig), &(args_info->update_given),
              &(local_args_info.update_given), optarg, 0, "0.0", ARG_FLOAT,
              check_ambiguity, override, 0, 0,
              "update", 'u',
              additional_error))
            goto failure;
        
          break;
        case 'U':	/* Username to use for SASL authentication..  */
        
        
          if (update_arg( (void *)&(args_info->username_arg), 
               &(args_info->username_orig), &(args_info->username_given),
              &(local_args_info.username_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "username", 'U',
              additional_error))
            goto failure;
        
          break;
        case 'P':	/* Password to use for SASL authentication..  */
        
        
          if (update_arg( (void *)&(args_info->password_arg), 
               &(args_info->password_orig), &(args_info->password_given),
              &(local_args_info.password_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "password", 'P',
              additional_error))
            goto failure;
        
          break;
        case 'T':	/* Number of threads to spawn..  */
        
        
          if (update_arg( (void *)&(args_info->threads_arg), 
               &(args_info->threads_orig), &(args_info->threads_given),
              &(local_args_info.threads_given), optarg, 0, "1", ARG_INT,
              check_ambiguity, override, 0, 0,
              "threads", 'T',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* Connections to establish per server..  */
        
        
          if (update_arg( (void *)&(args_info->connections_arg), 
               &(args_info->connections_orig), &(args_info->connections_given),
              &(local_args_info.connections_given), optarg, 0, "1", ARG_INT,
              check_ambiguity, override, 0, 0,
              "connections", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'd':	/* Maximum depth to pipeline requests..  */
        
        
          if (update_arg( (void *)&(args_info->depth_arg), 
               &(args_info->depth_orig), &(args_info->depth_given),
              &(local_args_info.depth_given), optarg, 0, "1", ARG_INT,
              check_ambiguity, override, 0, 0,
              "depth", 'd',
              additional_error))
            goto failure;
        
          break;
        case 'R':	/* Assign threads to servers in round-robin fashion.  By default, each thread connects to every server..  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->roundrobin_given),
              &(local_args_info.roundrobin_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "roundrobin", 'R',
              additional_error))
            goto failure;
        
          break;
        case 'i':	/* Inter-arrival distribution (distribution).  Note: The distribution will automatically be adjusted to match the QPS given by --qps..  */
        
        
          if (update_arg( (void *)&(args_info->iadist_arg), 
               &(args_info->iadist_orig), &(args_info->iadist_given),
              &(local_args_info.iadist_given), optarg, 0, "exponential", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "iadist", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* Skip transmissions if previous requests are late.  This harms the long-term QPS average, but reduces spikes in QPS after long latency requests..  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->skip_given),
              &(local_args_info.skip_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "skip", 'S',
              additional_error))
            goto failure;
        
          break;
        case 'B':	/* Use blocking epoll().  May increase latency..  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->blocking_given),
              &(local_args_info.blocking_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "blocking", 'B',
              additional_error))
            goto failure;
        
          break;
        case 'w':	/* Warmup time before starting measurement..  */
        
        
          if (update_arg( (void *)&(args_info->warmup_arg), 
               &(args_info->warmup_orig), &(args_info->warmup_given),
              &(local_args_info.warmup_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "warmup", 'w',
              additional_error))
            goto failure;
        
          break;
        case 'W':	/* Time to wait after startup to start measurement..  */
        
        
          if (update_arg( (void *)&(args_info->wait_arg), 
               &(args_info->wait_orig), &(args_info->wait_given),
              &(local_args_info.wait_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "wait", 'W',
              additional_error))
            goto failure;
        
          break;
        case 'A':	/* Run client in agent mode..  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->agentmode_given),
              &(local_args_info.agentmode_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "agentmode", 'A',
              additional_error))
            goto failure;
        
          break;
        case 'a':	/* Enlist remote agent..  */
        
          if (update_multiple_arg_temp(&agent_list, 
              &(local_args_info.agent_given), optarg, 0, 0, ARG_STRING,
              "agent", 'a',
              additional_error))
            goto failure;
        
          break;
        case 'p':	/* Agent port..  */
        
        
          if (update_arg( (void *)&(args_info->agent_port_arg), 
               &(args_info->agent_port_orig), &(args_info->agent_port_given),
              &(local_args_info.agent_port_given), optarg, 0, "5556", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "agent_port", 'p',
              additional_error))
            goto failure;
        
          break;
        case 'l':	/* Lambda multiplier.  Increases share of QPS for this client..  */
        
        
          if (update_arg( (void *)&(args_info->lambda_mul_arg), 
               &(args_info->lambda_mul_orig), &(args_info->lambda_mul_given),
              &(local_args_info.lambda_mul_given), optarg, 0, "1", ARG_INT,
              check_ambiguity, override, 0, 0,
              "lambda_mul", 'l',
              additional_error))
            goto failure;
        
          break;
        case 'C':	/* Master client connections per server, overrides --connections..  */
        
        
          if (update_arg( (void *)&(args_info->measure_connections_arg), 
               &(args_info->measure_connections_orig), &(args_info->measure_connections_given),
              &(local_args_info.measure_connections_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "measure_connections", 'C',
              additional_error))
            goto failure;
        
          break;
        case 'Q':	/* Explicitly set master client QPS, spread across threads and connections..  */
        
        
          if (update_arg( (void *)&(args_info->measure_qps_arg), 
               &(args_info->measure_qps_orig), &(args_info->measure_qps_given),
              &(local_args_info.measure_qps_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "measure_qps", 'Q',
              additional_error))
            goto failure;
        
          break;
        case 'D':	/* Set master client connection depth..  */
        
        
          if (update_arg( (void *)&(args_info->measure_depth_arg), 
               &(args_info->measure_depth_orig), &(args_info->measure_depth_given),
              &(local_args_info.measure_depth_given), optarg, 0, 0, ARG_INT,
              check_ambiguity, override, 0, 0,
              "measure_depth", 'D',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          if (strcmp (long_options[option_index].name, "version") == 0) {
            cmdline_parser_print_version ();
            cmdline_parser_free (&local_args_info);
            exit (EXIT_SUCCESS);
          }

          /* Disable log messages..  */
          if (strcmp (long_options[option_index].name, "quiet") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->quiet_given),
                &(local_args_info.quiet_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "quiet", '-',
                additional_error))
              goto failure;
          
          }
          /* Use binary memcached protocol instead of ASCII..  */
          else if (strcmp (long_options[option_index].name, "binary") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->binary_given),
                &(local_args_info.binary_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "binary", '-',
                additional_error))
              goto failure;
          
          }
          /* Set CPU affinity for threads, round-robin.  */
          else if (strcmp (long_options[option_index].name, "affinity") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->affinity_given),
                &(local_args_info.affinity_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "affinity", '-',
                additional_error))
              goto failure;
          
          }
          /* Enforce a minimum delay of ~1/lambda between requests..  */
          else if (strcmp (long_options[option_index].name, "moderate") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->moderate_given),
                &(local_args_info.moderate_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "moderate", '-',
                additional_error))
              goto failure;
          
          }
          /* Skip database loading..  */
          else if (strcmp (long_options[option_index].name, "noload") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->noload_given),
                &(local_args_info.noload_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "noload", '-',
                additional_error))
              goto failure;
          
          }
          /* Load database and then exit..  */
          else if (strcmp (long_options[option_index].name, "loadonly") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->loadonly_given),
                &(local_args_info.loadonly_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "loadonly", '-',
                additional_error))
              goto failure;
          
          }
          /* Don't use TCP_NODELAY..  */
          else if (strcmp (long_options[option_index].name, "no_nodelay") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->no_nodelay_given),
                &(local_args_info.no_nodelay_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "no_nodelay", '-',
                additional_error))
              goto failure;
          
          }
          /* Record latency samples to given file..  */
          else if (strcmp (long_options[option_index].name, "save") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->save_arg), 
                 &(args_info->save_orig), &(args_info->save_given),
                &(local_args_info.save_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "save", '-',
                additional_error))
              goto failure;
          
          }
          /* Search for the QPS where N-order statistic < Xus.  (i.e. --search 95:1000 means find the QPS where 95% of requests are faster than 1000us)..  */
          else if (strcmp (long_options[option_index].name, "search") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->search_arg), 
                 &(args_info->search_orig), &(args_info->search_given),
                &(local_args_info.search_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "search", '-',
                additional_error))
              goto failure;
          
          }
          /* Scan latency across QPS rates from min to max..  */
          else if (strcmp (long_options[option_index].name, "scan") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->scan_arg), 
                 &(args_info->scan_orig), &(args_info->scan_given),
                &(local_args_info.scan_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "scan", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  update_multiple_arg((void *)&(args_info->server_arg),
    &(args_info->server_orig), args_info->server_given,
    local_args_info.server_given, 0,
    ARG_STRING, server_list);
  update_multiple_arg((void *)&(args_info->agent_arg),
    &(args_info->agent_orig), args_info->agent_given,
    local_args_info.agent_given, 0,
    ARG_STRING, agent_list);

  args_info->verbose_given += local_args_info.verbose_given;
  local_args_info.verbose_given = 0;
  args_info->server_given += local_args_info.server_given;
  local_args_info.server_given = 0;
  args_info->agent_given += local_args_info.agent_given;
  local_args_info.agent_given = 0;
  
  if (check_required)
    {
      error_occurred += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  return 0;

failure:
  free_list (server_list, 1 );
  free_list (agent_list, 1 );
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

#ifndef CONFIG_FILE_LINE_SIZE
#define CONFIG_FILE_LINE_SIZE 2048
#endif
#define ADDITIONAL_ERROR " in configuration file "

#define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
/* 3 is for "--" and "=" */

static int
_cmdline_parser_configfile (const char *filename, int *my_argc)
{
  FILE* file;
  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
  char linebuf[CONFIG_FILE_LINE_SIZE];
  int line_num = 0;
  int result = 0, equal;
  char *fopt, *farg;
  char *str_index;
  size_t len, next_token;
  char delimiter;

  if ((file = fopen(filename, "r")) == 0)
    {
      fprintf (stderr, "%s: Error opening configuration file '%s'\n",
               CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != 0)
    {
      ++line_num;
      my_argv[0] = '\0';
      len = strlen(linebuf);
      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
        {
          fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                   CMDLINE_PARSER_PACKAGE, filename, line_num);
          result = EXIT_FAILURE;
          break;
        }

      /* find first non-whitespace character in the line */
      next_token = strspn (linebuf, " \t\r\n");
      str_index  = linebuf + next_token;

      if ( str_index[0] == '\0' || str_index[0] == '#')
        continue; /* empty line or comment line is skipped */

      fopt = str_index;

      /* truncate fopt at the end of the first non-valid character */
      next_token = strcspn (fopt, " \t\r\n=");

      if (fopt[next_token] == '\0') /* the line is over */
        {
          farg  = 0;
          equal = 0;
          goto noarg;
        }

      /* remember if equal sign is present */
      equal = (fopt[next_token] == '=');
      fopt[next_token++] = '\0';

      /* advance pointers to the next token after the end of fopt */
      next_token += strspn (fopt + next_token, " \t\r\n");

      /* check for the presence of equal sign, and if so, skip it */
      if ( !equal )
        if ((equal = (fopt[next_token] == '=')))
          {
            next_token++;
            next_token += strspn (fopt + next_token, " \t\r\n");
          }
      str_index  += next_token;

      /* find argument */
      farg = str_index;
      if ( farg[0] == '\"' || farg[0] == '\'' )
        { /* quoted argument */
          str_index = strchr (++farg, str_index[0] ); /* skip opening quote */
          if (! str_index)
            {
              fprintf
                (stderr,
                 "%s:%s:%d: unterminated string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }
      else
        { /* read up the remaining part up to a delimiter */
          next_token = strcspn (farg, " \t\r\n#\'\"");
          str_index += next_token;
        }

      /* truncate farg at the delimiter and store it for further check */
      delimiter = *str_index, *str_index++ = '\0';

      /* everything but comment is illegal at the end of line */
      if (delimiter != '\0' && delimiter != '#')
        {
          str_index += strspn(str_index, " \t\r\n");
          if (*str_index != '\0' && *str_index != '#')
            {
              fprintf
                (stderr,
                 "%s:%s:%d: malformed string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }

    noarg:
      if (!strcmp(fopt,"include")) {
        if (farg && *farg) {
          result = _cmdline_parser_configfile(farg, my_argc);
        } else {
          fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
        }
        continue;
      }
      len = strlen(fopt);
      strcat (my_argv, len > 1 ? "--" : "-");
      strcat (my_argv, fopt);
      if (len > 1 && ((farg && *farg) || equal))
        strcat (my_argv, "=");
      if (farg && *farg)
        strcat (my_argv, farg);
      ++(*my_argc);

      cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
      cmd_line_list_tmp->next = cmd_line_list;
      cmd_line_list = cmd_line_list_tmp;
      cmd_line_list->string_arg = gengetopt_strdup(my_argv);
    } /* while */

  if (file)
    fclose(file);
  return result;
}

int
cmdline_parser_configfile (
  const char *filename,
                           struct gengetopt_args_info *args_info,
                           int override, int initialize, int check_required)
{
  struct cmdline_parser_params params;

  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;
  
  return cmdline_parser_config_file (filename, args_info, &params);
}

int
cmdline_parser_config_file (const char *filename,
                           struct gengetopt_args_info *args_info,
                           struct cmdline_parser_params *params)
{
  int i, result;
  int my_argc = 1;
  char **my_argv_arg;
  char *additional_error;

  /* store the program name */
  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
  cmd_line_list_tmp->next = cmd_line_list;
  cmd_line_list = cmd_line_list_tmp;
  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);

  result = _cmdline_parser_configfile(filename, &my_argc);

  if (result != EXIT_FAILURE) {
    my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
    cmd_line_list_tmp = cmd_line_list;

    for (i = my_argc - 1; i >= 0; --i) {
      my_argv_arg[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

    my_argv_arg[my_argc] = 0;

    additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
    strcpy (additional_error, ADDITIONAL_ERROR);
    strcat (additional_error, filename);
    result =
      cmdline_parser_internal (my_argc, my_argv_arg, args_info,
                              params,
                              additional_error);

    free (additional_error);
    free (my_argv_arg);
  }

  free_cmd_list();
  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}
/* vim: set ft=c noet ts=8 sts=8 sw=8 tw=80 nojs spell : */
